})
#----------------------------TABLE----------------------------#
output$table_recette <- render_gt({
ifelse(input$select_all,
df_rec <- df[,c("img", "nom","pays", "niveau", "temps", "cout")],
df_rec <- df[,c("img", "nom","pays", "niveau", "temps", "cout")] |>
filter(pays %in% input$select_pays) |>
filter(niveau %in% input$select_niveau) |>
filter(temps < input$select_temps))
df_rec |>
gt() |>
opt_interactive(use_compact_mode = TRUE) |>
text_transform(
locations = cells_body(columns = img),
fn = function(x){
web_image(
url = df_rec$img,
height = px(50)
)
}
) |>
tab_header("Recettes ü•£") |>
cols_label(
img = html(fontawesome::fa("camera-retro"),"Image"),
nom = html(fontawesome::fa("utensils"),"Nom"),
pays = html(fontawesome::fa("globe"),"Pays"),
niveau = html(fontawesome::fa("layer-group"),"Niveau"),
temps = html(fontawesome::fa("clock"),"Temps"),
cout = html(fontawesome::fa("sack-dollar"),"Co√ªt/pers"))
})
#----------------------------TABLE----------------------------#
output$map_monde <- renderPlotly({
data <- merge(df, iso3, by = "pays", all.x = TRUE)
df_mc <- data |>
group_by(iso_alpha3, pays) |> summarise(mean_cout = mean(cout))
plot_ly(df_mc, type='choropleth',
locations=df_mc$iso_alpha3,
z=df_mc$mean_cout,
text=df_mc$pays,
colorscale="Blues")
})
}
path <- paste0(dirname(rstudioapi::getActiveDocumentContext()$path), "/")
source(paste0(path, "server.R"))
source(paste0(path, "ui.R"))
shinyApp(ui = ui, server = server)
library(shiny)
library(arrow)
library(ggplot2)
library(tidyverse)
library(bslib)
library(DT)
library(shinydashboard)
library(shinythemes)
library(shiny)
library(arrow)
library(ggplot2)
library(tidyverse)
library(bslib)
library(DT)
library(shinydashboard)
library(shinythemes)
library(fontawesome)
library(bsicons)
path <- paste0(dirname(rstudioapi::getActiveDocumentContext()$path), "/")
source(paste0(path, "server.R"))
df <- read_parquet("C:/Users/aybuk/Desktop/Cours M2/Big Data/Shiny/data/recette.parquet")
df$temps <- round(df$temps,2)
title_css <- ".title { font-family: 'Satisfy', cursive; font-weight: bold; }"
custom_theme <- bs_theme(
version = 5,
primary = "#74736e",
bg = "#FFFFFF",
fg = "#403f3b",
font_scale = 1.1,
heading_font = font_google("Playfair Display"),
base_font = font_google("Roboto")
)
test <- bs_add_rules(custom_theme, title_css)
ui <- page_navbar(
theme = test,
bg = "#e7eef2",
title = span(class = "title", img(src = "logo2.png", height = 90), "Cook'ies"),
sidebar = sidebar(
checkboxInput("select_all", "Tout cocher", value = FALSE),
selectInput(
"select_pays",
"Pays",
choices = unique(df$pays),
multiple = TRUE,
selected = "espagne"
),
sliderInput(
"select_temps",
"Temps",
min = 0,
value = 20,
max = max(df$temps),
step = 5
),
selectInput(
"select_niveau",
"Niveau",
choices = unique(df$niveau),
multiple = TRUE,
selected = "Facile"
)
),
nav_panel(
title = "Accueil üè†Ô∏é",
card(
card_header("Bienvenue sur Cook'ies üç™"),
p("Test")
),
layout_columns(
value_box(
title = "Nombre total de recettes",
value =  nrow(df),
showcase = bs_icon("cookie"),
theme = value_box_theme(bg = "#e6f2fd", fg = "#2b3254")
),
value_box(
title = "Nombre de pays",
value = length(unique(df$pays)),
showcase = bs_icon("geo"),
theme = value_box_theme(bg = "#e6f2fd", fg = "#0B538E"))
),
layout_columns(
value_box(
title = "Co√ªt moyen par recette",
value = round(mean(df$cout),3), "‚Ç¨/pers",
showcase = bs_icon("cash-stack"),
theme = value_box_theme(bg = "#e6f2fd", fg = "#0B538E" )
),
value_box(
title = "Temps moyen par recette",
value = round(mean(df$temps),3),
showcase = bs_icon("clock-history"),
theme = value_box_theme(bg = "#e6f2fd", fg = "#2b3254")
)
)
),
nav_panel(
title = "Recettes üçΩÔ∏è",
card(
card_header("Les recettes"),
gt_output("table_recette")
)
),
nav_panel(
title = "Statistiques üìä",
card(
card_header("Les co√ªts"),
plotlyOutput("plot_cout")
)
),
nav_panel(
title = "Carte üó∫",
card(
card_header("Map"),
plotlyOutput("map_monde")
)
),
nav_spacer(),
nav_menu(
title = "Links",
align = "right"
)
)
runApp('C:/Users/aybuk/Desktop/Cours M2/Big Data/Shiny/Shiny')
shiny::runApp('C:/Users/aybuk/Desktop/Cours M2/Big Data/Shiny/Shiny')
setwd("C:/Users/aybuk/Desktop/Cours M2/Big Data/Shiny/Shiny")
library(shiny)
library(arrow)
library(ggplot2)
library(tidyverse)
library(bslib)
library(DT)
library(shinydashboard)
library(shinythemes)
library(fontawesome)
library(bsicons)
library(textdata)
library(tidyverse)
library(tidytext)
library(Xplortext)
library(wordcloud)
library(gutenbergr)
library(FactoMineR)
library(janitor)
library(arrow)
path <- paste0(dirname(rstudioapi::getActiveDocumentContext()$path), "/")
df <- read_parquet("C:/Users/aybuk/Desktop/Cours M2/Big Data/Shiny/data/recette.parquet")
df_comment <- read.csv("C:/Users/aybuk/Desktop/Cours M2/Big Data/Shiny/data/comment_en.csv", sep = ",", header = TRUE, fileEncoding = "utf-8")
df$temps <- round(df$temps,2)
title_css <- ".title { font-family: 'Satisfy', cursive; font-weight: bold; }"
custom_theme <- bs_theme(
version = 5,
primary = "#74736e",
bg = "#FFFFFF",
fg = "#74736e", #403f3b
font_scale = 1.1,
heading_font = font_google("Playfair Display"),
base_font = font_google("Roboto")
)
test <- bs_add_rules(custom_theme, title_css)
ui <- page_navbar(
theme = test,
bg = "#e7eef2",
title = span(class = "title", img(src = "logo2.png", height = 90), "Cook'ies"),
sidebar = sidebar(
checkboxInput("select_all", "Tout cocher", value = FALSE),
selectInput(
"select_pays",
"Pays",
choices = unique(df$pays),
multiple = TRUE,
selected = "Espagne"
),
sliderInput(
"select_temps",
"Temps",
min = 0,
value = 20,
max = max(df$temps),
step = 5
),
selectInput(
"select_niveau",
"Niveau",
choices = unique(df$niveau),
multiple = TRUE,
selected = "Facile"
)
),
nav_panel(
title = "Accueil üè†Ô∏é",
card(
card_header("Bienvenue sur Cook'ies üç™"),
p("Test")
),
layout_columns(
value_box(
title = "Nombre total de recettes",
value =  textOutput("nb_recette"),
showcase = bs_icon("cookie"),
theme = value_box_theme(bg = "#e6f2fd", fg = "#2b3254")
),
value_box(
title = "Nombre de pays",
value = textOutput("nb_pays"),
showcase = bs_icon("geo"),
theme = value_box_theme(bg = "#e6f2fd", fg = "#0B538E"))
),
layout_columns(
value_box(
title = "Co√ªt moyen par recette",
value = textOutput("cout_recette"), "‚Ç¨/pers",
showcase = bs_icon("cash-stack"),
theme = value_box_theme(bg = "#e6f2fd", fg = "#0B538E" )
),
value_box(
title = "Temps moyen par recette",
value = textOutput("tps_recette"),
showcase = bs_icon("clock-history"),
theme = value_box_theme(bg = "#e6f2fd", fg = "#2b3254")
)
)
),
nav_panel(
title = "Recettes üçΩÔ∏è",
card(
card_header("Les recettes"),
gt_output("table_recette")
)
),
nav_panel(
title = "D√©tail recette üìã"
),
nav_panel(
title = "Statistiques üìä",
card(
card_header("Les co√ªts"),
plotlyOutput("plot_cout")
)
),
nav_panel(
title = "Carte üó∫",
card(
card_header("Map"),
plotlyOutput("map_monde")
)
),
nav_panel(
title = "Note ‚≠ê",
card(
layout_columns(card(card_header("Comment est calcul√© la note ?"), p(
"
La note est constitu√©e de deux composantes principales. La premi√®re est un ratio qui √©value la proportion d'adjectifs positifs par rapport au nombre total d'adjectifs. La seconde composante est bas√©e sur la m√©thode Afinn, qui attribue un score √† chaque adjectif. Pour chaque recette, on calcule la somme de tous les scores des adjectifs, que l'on divise ensuite par le nombre de commentaires. Ensuite, nous standardisons ind√©pendamment les deux composantes en les centrant et les r√©duisant, en leur attribuant chacune un poids de un demi. Enfin, nous multiplions les deux valeurs pour obtenir une note comprise entre 0 et 5."
)), card(plotOutput("plot_words"))),
layout_columns(card(plotOutput("plot_by_note")), card(plotOutput("plot_note_pays")))
)
),
nav_spacer(),
nav_menu(
title = "Links",
align = "right"
)
)
library(shiny)
library(ggplot2)
library(tidyverse)
library(arrow)
library(gt)
library(shinydashboard)
library(plotly)
library(fontawesome)
library(bslib)
score_afinn <- df_comment |>
select("comment_en", "nom", "pays") |>
unnest_tokens(word,comment_en) |>
inner_join(get_sentiments("afinn")) |>
group_by(nom, pays) |>
mutate(nb_comment = n()) |>
group_by(nom, nb_comment, pays) |>
summarise(sentiment = sum(value)) |>
mutate(note_afinn = sentiment/nb_comment)
score_bing <- df_comment |> select("comment_en", "nom", "pays") |>
unnest_tokens(word,comment_en) |>
inner_join(get_sentiments("bing")) |>
group_by(nom, pays) |>
summarise(
positive = sum(sentiment == "positive"),
negative = sum(sentiment == "negative")) |>
mutate(note_bing = positive / (negative + positive))
max_bing <- max(score_bing$note_bing)
min_bing <- min(score_bing$note_bing)
max_afinn <- max(score_afinn$note_afinn)
min_afinn <- min(score_afinn$note_afinn)
score <- merge(score_afinn, score_bing, on = "nom") |>
select("nom", "pays","nb_comment", "note_afinn", "note_bing") |>
mutate(note = 5*((note_afinn-min_afinn)/(max_afinn - min_afinn) + (note_bing-min_bing)/(max_bing - min_bing))/2) |>
filter(nb_comment > 5)
score_pays <- score |>
group_by(pays) |>
summarise(note = mean(note),
nb_comment = sum(nb_comment),
nb_recette = n())
df_merge <- merge(df, score, by = "nom", all = TRUE, suffixes = c("",".y"))
server <- function(input, output) {
#----------------------------PLOT----------------------------#
output$plot_cout <- renderPlotly({
ifelse(input$select_all,
df_plot <- df,
df_plot <- df |>
filter(pays %in% input$select_pays) |>
filter(niveau %in% input$select_niveau) |>
filter(temps < input$select_temps))
plot_ly(x = df_plot$cout, type = "histogram")
})
#----------------------------PLOT-NOTE-----------------------#
output$plot_words <- renderPlot({
bing_count <- df_comment |>
select("comment_en", "nom") |>
unnest_tokens(word,comment_en) |>
inner_join(get_sentiments("bing")) |>
count(word, sentiment, sort = TRUE)
my_stop_words <- tibble(
word = c("lemon"),
lexicon = "autres"
)
bing_count |>
group_by(sentiment) |>
anti_join(bind_rows(get_stopwords("en"), my_stop_words),
by = "word") |>
top_n(10) |>
ggplot(aes(x = reorder(word, n), y = n)) +
geom_col(fill = "royalblue", alpha = 0.35) +
facet_wrap(~sentiment, nrow= 1, scale = "free") +
coord_flip()+
labs(x = "word")+
theme_minimal()
})
output$plot_by_note <- renderPlot({
score |>
ggplot()+
aes(x = note)+
geom_histogram(aes(y=..density..), alpha=0.1,
fill = "darkblue", bins = 50)+
geom_density(fill = "royalblue",
alpha = 0.25)+
theme_minimal() +
labs(x = "Note", y = "Densit√©",
title = "R√©partition des notes")+
geom_vline(aes(xintercept=mean(note),
color="red"),
linetype="dashed")+
theme(legend.position = "None")
})
output$plot_note_pays <- renderPlot({
score_pays |>
filter(nb_recette > 5) |>
top_n(10) |>
ggplot(aes(y = note,
x = fct_reorder(pays, note)))+
geom_col(fill = "royalblue", alpha = 0.25,
color = "royalblue", width = 0.75)+
coord_flip()+
theme_minimal()+
labs(x = "Note",
y = "",
title = "Note par pays")+
geom_hline(aes(yintercept=mean(note)),
linetype="dashed",
size=1.2,
color="darkblue")
})
#----------------------------TABLE----------------------------#
output$table_recette <- render_gt({
ifelse(input$select_all,
df_rec <- df_merge[,c("img", "nom","pays", "niveau", "temps", "cout","ISO2", "note")],
df_rec <- df_merge[,c("img", "nom","pays", "niveau", "temps", "cout","ISO2", "note")] |>
filter(pays %in% input$select_pays) |>
filter(niveau %in% input$select_niveau) |>
filter(temps < input$select_temps))
df_rec |>
# mutate(note = case_when(
#   note %% 1 == 0 ~ strrep("star,", note),
#   note %% 1 != 0 ~ paste0(strrep("star,", floor(note)), "star-half")
# )) |>
gt() |>
opt_interactive(use_compact_mode = TRUE) |>
text_transform(
locations = cells_body(columns = img),
fn = function(x){
web_image(
url = df_rec$img,
height = px(50)
)
}
) |>
fmt_integer() |>
fmt_flag(columns = ISO2) |>
cols_merge(
columns = c(pays, ISO2),
pattern = "{2} {1}"
) |>
tab_header("Recettes ü•£") |>
cols_label(
img = html(fontawesome::fa("camera-retro"),"Image"),
nom = html(fontawesome::fa("utensils"),"Nom"),
pays = html(fontawesome::fa("globe"),"Pays"),
niveau = html(fontawesome::fa("layer-group"),"Niveau"),
temps = html(fontawesome::fa("clock"),"Temps"),
cout = html(fontawesome::fa("sack-dollar"),"Co√ªt/pers"),
note = html(fontawesome::fa("star"),"Note")) #|>
#fmt_icon(
#  columns = note,
#  fill_color = "red",
#  fill_alpha = from_column("note", fn = function(x) x )
#)
})
#----------------------------TABLE----------------------------#
output$map_monde <- renderPlotly({
df_mc <- df |>
group_by(ISO3, pays) |> summarise(mean_cout = mean(cout))
plot_ly(df_mc, type='choropleth',
locations=df_mc$ISO3,
z=df_mc$mean_cout,
text=df_mc$pays,
colorscale="Blues")
})
#----------------------------VALUE BOX----------------------------#
output$nb_recette <- renderText({
ifelse(input$select_all,
df |> nrow() ,
nb <- df |>
filter(pays %in% input$select_pays) |>
filter(niveau %in% input$select_niveau) |>
filter(temps < input$select_temps) |>
nrow())
})
output$nb_pays <- renderText({
ifelse(input$select_all,
nb <- df,
nb <- df |>
filter(pays %in% input$select_pays) |>
filter(niveau %in% input$select_niveau) |>
filter(temps < input$select_temps))
length(unique(nb$pays))
})
output$cout_recette <- renderText({
ifelse(input$select_all,
nb <- df,
nb <- df |>
filter(pays %in% input$select_pays) |>
filter(niveau %in% input$select_niveau) |>
filter(temps < input$select_temps))
round(mean(nb$cout),3)
})
output$tps_recette <- renderText({
ifelse(input$select_all,
nb <- df,
nb <- df |>
filter(pays %in% input$select_pays) |>
filter(niveau %in% input$select_niveau) |>
filter(temps < input$select_temps))
round(mean(nb$temps),3)
})
#----------------------------TEXTE----------------------------#
}
runApp()
