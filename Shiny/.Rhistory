vp2 <- round(545/(545+19),4)*100
vn2 <- round(28/(28+72),4)*100
tablda <- tibble(
Type = c("Erreur global", "Sensibilité", "Spécificité"),
Taux = c(err2, vp2, vn2)
)
kable(tablda,
caption = "Erreus du modèles",
booktabs = TRUE, align = "c") %>%
kable_styling(bootstrap_options = "striped")
err3 <- round((95+47)/(95+47+469+53),4)*100
vp3 <- round(469/(469+95),4)*100
vn3 <- round(53/(53+47),4)*100
tabqda <- tibble(
Type = c("Erreur global", "Sensibilité", "Spécificité"),
Taux = c(err3, vp3, vn3)
)
kable(tabqda,
caption = "Erreus du modèles",
booktabs = TRUE, align = "c") %>%
kable_styling(bootstrap_options = "striped")
err4 <- round((71+17)/(71+29+547+17),4)*100
vp4 <- round(547/(547+17),4)*100
vn4 <- round(29/(29+71),4)*100
tabknn <- tibble(
Type = c("Erreur global", "Sensibilité", "Spécificité"),
Taux = c(err4, vp4, vn4)
)
kable(tabknn,
caption = "Erreus du modèles",
booktabs = TRUE, align = "c") %>%
kable_styling(bootstrap_options = "striped")
confusion_matrix(svm_lin_res)
err5 <- round((100+0)/(100+0+564+0),4)*100
vp5 <- round(564/(564+0),4)*100
vn5 <- round(0/(100+0),4)*100
tabsvml <- tibble(
Type = c("Erreur global", "Sensibilité", "Spécificité"),
Taux = c(err5, vp5, vn5)
)
kable(tabsvml,
caption = "Erreus du modèles",
booktabs = TRUE, align = "c") %>%
kable_styling(bootstrap_options = "striped")
err6 <- round((72+15)/(72+15+549+28),4)*100
vp6 <- round(549/(549+15),4)*100
vn6 <- round(28/(28+72),4)*100
tabsvmr <- tibble(
Type = c("Erreur global", "Sensibilité", "Spécificité"),
Taux = c(err6, vp6, vn6)
)
kable(tabsvmr,
caption = "Erreus du modèles",
booktabs = TRUE, align = "c") %>%
kable_styling(bootstrap_options = "striped")
err7 <- round((89+19)/(89+19+545+11),4)*100
vp7 <- round(545/(545+19),4)*100
vn7 <- round(11/(11+89),4)*100
tabarb <- tibble(
Type = c("Erreur global", "Sensibilité", "Spécificité"),
Taux = c(err7, vp7, vn7)
)
kable(tabarb,
caption = "Erreus du modèles",
booktabs = TRUE, align = "c") %>%
kable_styling(bootstrap_options = "striped")
((33+15)*(87-18)/6)*19-487
confusion_matrix(bg_res)
err8 <- round((72+15)/(72+15+549+28),4)*100
vp8 <- round(549/(549+15),4)*100
vn8 <- round(28/(28+72),4)*100
tabbag <- tibble(
Type = c("Erreur global", "Sensibilité", "Spécificité"),
Taux = c(err8, vp8, vn8)
)
kable(tabbag,
caption = "Erreus du modèles",
booktabs = TRUE, align = "c") %>%
kable_styling(bootstrap_options = "striped")
confusion_matrix(rf_res)
err9 <- round((82+6)/(82+6+558+18),4)*100
vp9 <- round(558/(558+6),4)*100
vn9 <- round(18/(18+82),4)*100
tabrf <- tibble(
Type = c("Erreur global", "Sensibilité", "Spécificité"),
Taux = c(err9, vp9, vn9)
)
kable(tabrf,
caption = "Erreus du modèles",
booktabs = TRUE, align = "c") %>%
kable_styling(bootstrap_options = "striped")
confusion_matrix(boost_res)
err10 <- round((57+14)/(57+14+550+43),4)*100
vp10 <- round(550/(550+14),4)*100
vn10 <- round(43/(43+57),4)*100
tabada <- tibble(
Type = c("Erreur global", "Sensibilité", "Spécificité"),
Taux = c(err10, vp10, vn10)
)
kable(tabada,
caption = "Erreus du modèles",
booktabs = TRUE, align = "c") %>%
kable_styling(bootstrap_options = "striped")
library(themis)
install.packages("extrafont")
install.packages("glmulti")
install.packages("rlibrary")
install.packages("rJava")
install.packages("rJava")
install.packages("rJava")
install.packages("see")
install.packages("rlang")
remove.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("frontier")
install.packages("rlang")
install.packages(c("askpass", "bayesm", "blob", "brew", "brio", "broom", "bslib", "cachem", "car", "caret", "caschrono", "checkmate", "classInt", "cli", "clock", "collapse", "colorspace", "colourpicker", "commonmark", "conflicted", "copula", "covr", "cowplot", "cpp11", "credentials", "crosstalk", "curl", "data.table", "datawizard", "DBI", "dbplyr", "deldir", "dendextend", "desc", "dials", "DiceDesign", "digest", "discrim", "downlit", "dplyr", "DT", "dtplyr", "e1071", "ellipse", "emmeans", "evaluate", "explor", "FactoInvestigate", "FactoMineR", "Factoshiny", "fansi", "fastmap", "flexmix", "fontawesome", "forcats", "forecast", "formatR", "Formula", "fs", "future", "future.apply", "gapminder", "gargle", "gert", "GGally", "ggformula", "ggpubr", "ggrepel", "ggridges", "ggsci", "ggthemes", "gh", "glmnet", "glmtoolbox", "glue", "gmp", "googledrive", "googlesheets4", "gtable", "gtools", "hardhat", "haven", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "infer", "interp", "ipred", "jsonlite", "kernlab", "klaR", "knitr", "labeling", "labelled", "later", "lava", "lifecycle", "lme4", "lubridate", "magick", "markdown", "MASS", "Matrix", "MatrixModels", "matrixStats", "mice", "minqa", "miscTools", "missMDA", "modeldata", "modelenv", "modelr", "modelsummary", "mosaic", "mosaicCore", "mosaicData", "multcompView", "mvtnorm", "nnet", "openssl", "pandoc", "parallelly", "parsnip", "patchwork", "pbkrtest", "pcaPP", "pillar", "pkgbuild", "pkgload", "plm", "plotly", "plyr", "polyclip", "prettyunits", "pROC", "processx", "prodlim", "profvis", "progress", "progressr", "promises", "ps", "psych", "purrr", "quantmod", "quantreg", "R.utils", "ragg", "rbibutils", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppGSL", "Rdpack", "readr", "readxl", "recipes", "rematch", "remotes", "Rfast", "rmarkdown", "Rmpfr", "rprojroot", "rsample", "rstatix", "rstudioapi", "sandwich", "sass", "scales", "scatterplot3d", "shiny", "slider", "sourcetools", "sp", "splines2", "stringi", "stringr", "styler", "svglite", "sys", "systemfonts", "tables", "testthat", "textshaping", "themis", "tibble", "tidymodels", "tidyr", "tidyverse", "timeDate", "tinytex", "tseries", "TTR", "tune", "tzdb", "usethis", "utf8", "uuid", "vctrs", "vip", "viridis", "viridisLite", "vroom", "waldo", "warp", "webshot", "wesanderson", "withr", "workflows", "workflowsets", "xfun", "xgboost", "xml2", "xts", "yaml", "yardstick", "zip", "zoo"))
install.packages(c("askpass", "bayesm", "blob", "brew", "brio", "broom", "bslib", "cachem", "car", "caret", "caschrono", "checkmate", "classInt", "cli", "clock", "collapse", "colorspace", "colourpicker", "commonmark", "conflicted", "copula", "covr", "cowplot", "cpp11", "credentials", "crosstalk", "curl", "data.table", "datawizard", "DBI", "dbplyr", "deldir", "dendextend", "desc", "dials", "DiceDesign", "digest", "discrim", "downlit", "dplyr", "DT", "dtplyr", "e1071", "ellipse", "emmeans", "evaluate", "explor", "FactoInvestigate", "FactoMineR", "Factoshiny", "fansi", "fastmap", "flexmix", "fontawesome", "forcats", "forecast", "formatR", "Formula", "fs", "future", "future.apply", "gapminder", "gargle", "gert", "GGally", "ggformula", "ggpubr", "ggrepel", "ggridges", "ggsci", "ggthemes", "gh", "glmnet", "glmtoolbox", "glue", "gmp", "googledrive", "googlesheets4", "gtable", "gtools", "hardhat", "haven", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "infer", "interp", "ipred", "jsonlite", "kernlab", "klaR", "knitr", "labeling", "labelled", "later", "lava", "lifecycle", "lme4", "lubridate", "magick", "markdown", "MASS", "Matrix", "MatrixModels", "matrixStats", "mice", "minqa", "miscTools", "missMDA", "modeldata", "modelenv", "modelr", "modelsummary", "mosaic", "mosaicCore", "mosaicData", "multcompView", "mvtnorm", "nnet", "openssl", "pandoc", "parallelly", "parsnip", "patchwork", "pbkrtest", "pcaPP", "pillar", "pkgbuild", "pkgload", "plm", "plotly", "plyr", "polyclip", "prettyunits", "pROC", "processx", "prodlim", "profvis", "progress", "progressr", "promises", "ps", "psych", "purrr", "quantmod", "quantreg", "R.utils", "ragg", "rbibutils", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppGSL", "Rdpack", "readr", "readxl", "recipes", "rematch", "remotes", "Rfast", "rmarkdown", "Rmpfr", "rprojroot", "rsample", "rstatix", "rstudioapi", "sandwich", "sass", "scales", "scatterplot3d", "shiny", "slider", "sourcetools", "sp", "splines2", "stringi", "stringr", "styler", "svglite", "sys", "systemfonts", "tables", "testthat", "textshaping", "themis", "tibble", "tidymodels", "tidyr", "tidyverse", "timeDate", "tinytex", "tseries", "TTR", "tune", "tzdb", "usethis", "utf8", "uuid", "vctrs", "vip", "viridis", "viridisLite", "vroom", "waldo", "warp", "webshot", "wesanderson", "withr", "workflows", "workflowsets", "xfun", "xgboost", "xml2", "xts", "yaml", "yardstick", "zip", "zoo"))
install.packages(c("askpass", "bayesm", "blob", "brew", "brio", "broom", "bslib", "cachem", "car", "caret", "caschrono", "checkmate", "classInt", "cli", "clock", "collapse", "colorspace", "colourpicker", "commonmark", "conflicted", "copula", "covr", "cowplot", "cpp11", "credentials", "crosstalk", "curl", "data.table", "datawizard", "DBI", "dbplyr", "deldir", "dendextend", "desc", "dials", "DiceDesign", "digest", "discrim", "downlit", "dplyr", "DT", "dtplyr", "e1071", "ellipse", "emmeans", "evaluate", "explor", "FactoInvestigate", "FactoMineR", "Factoshiny", "fansi", "fastmap", "flexmix", "fontawesome", "forcats", "forecast", "formatR", "Formula", "fs", "future", "future.apply", "gapminder", "gargle", "gert", "GGally", "ggformula", "ggpubr", "ggrepel", "ggridges", "ggsci", "ggthemes", "gh", "glmnet", "glmtoolbox", "glue", "gmp", "googledrive", "googlesheets4", "gtable", "gtools", "hardhat", "haven", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "infer", "interp", "ipred", "jsonlite", "kernlab", "klaR", "knitr", "labeling", "labelled", "later", "lava", "lifecycle", "lme4", "lubridate", "magick", "markdown", "MASS", "Matrix", "MatrixModels", "matrixStats", "mice", "minqa", "miscTools", "missMDA", "modeldata", "modelenv", "modelr", "modelsummary", "mosaic", "mosaicCore", "mosaicData", "multcompView", "mvtnorm", "nnet", "openssl", "pandoc", "parallelly", "parsnip", "patchwork", "pbkrtest", "pcaPP", "pillar", "pkgbuild", "pkgload", "plm", "plotly", "plyr", "polyclip", "prettyunits", "pROC", "processx", "prodlim", "profvis", "progress", "progressr", "promises", "ps", "psych", "purrr", "quantmod", "quantreg", "R.utils", "ragg", "rbibutils", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppGSL", "Rdpack", "readr", "readxl", "recipes", "rematch", "remotes", "Rfast", "rmarkdown", "Rmpfr", "rprojroot", "rsample", "rstatix", "rstudioapi", "sandwich", "sass", "scales", "scatterplot3d", "shiny", "slider", "sourcetools", "sp", "splines2", "stringi", "stringr", "styler", "svglite", "sys", "systemfonts", "tables", "testthat", "textshaping", "themis", "tibble", "tidymodels", "tidyr", "tidyverse", "timeDate", "tinytex", "tseries", "TTR", "tune", "tzdb", "usethis", "utf8", "uuid", "vctrs", "vip", "viridis", "viridisLite", "vroom", "waldo", "warp", "webshot", "wesanderson", "withr", "workflows", "workflowsets", "xfun", "xgboost", "xml2", "xts", "yaml", "yardstick", "zip", "zoo"))
install.packages(c("xfun", "xgboost", "xml2", "xts", "yaml", "yardstick", "zip", "zoo"))
install.packages(c("askpass", "bayesm", "blob", "brew", "brio", "broom", "bslib", "cachem", "car", "caret", "caschrono", "checkmate", "classInt", "cli", "clock", "collapse", "colorspace", "colourpicker", "commonmark", "conflicted", "copula", "covr", "cowplot", "cpp11", "credentials", "crosstalk", "curl", "data.table", "datawizard", "DBI", "dbplyr", "deldir", "dendextend", "desc", "dials", "DiceDesign", "digest", "discrim", "downlit", "dplyr", "DT", "dtplyr", "e1071", "ellipse", "emmeans", "evaluate", "explor", "FactoInvestigate", "FactoMineR", "Factoshiny", "fansi", "fastmap", "flexmix", "fontawesome", "forcats", "forecast", "formatR", "Formula", "fs", "future", "future.apply", "gapminder", "gargle", "gert", "GGally", "ggformula", "ggpubr", "ggrepel", "ggridges", "ggsci", "ggthemes", "gh", "glmnet", "glmtoolbox", "glue", "gmp", "googledrive", "googlesheets4", "gtable", "gtools", "haven", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "infer", "interp", "ipred", "jsonlite", "kernlab", "klaR", "knitr", "labeling", "labelled", "later", "lava", "lifecycle", "lme4", "lubridate", "magick", "markdown", "MASS", "Matrix", "MatrixModels", "matrixStats", "mice", "minqa", "miscTools", "missMDA", "modeldata", "modelenv", "modelr", "modelsummary", "mosaic", "mosaicCore", "mosaicData", "multcompView", "mvtnorm", "nnet", "openssl", "pandoc", "parallelly", "parsnip", "patchwork", "pbkrtest", "pcaPP", "pkgbuild", "pkgload", "plm", "plotly", "plyr", "polyclip", "prettyunits", "pROC", "processx", "prodlim", "profvis", "progress", "progressr", "promises", "ps", "psych", "purrr", "quantmod", "quantreg", "R.utils", "ragg", "rbibutils", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppGSL", "Rdpack", "readr", "readxl", "recipes", "rematch", "remotes", "Rfast", "rmarkdown", "Rmpfr", "rprojroot", "rsample", "rstatix", "rstudioapi", "sandwich", "sass", "scales", "scatterplot3d", "shiny", "slider", "sourcetools", "sp", "splines2", "stringi", "stringr", "styler", "svglite", "sys", "systemfonts", "tables", "testthat", "textshaping", "themis", "tibble", "tidymodels", "tidyr", "tidyverse", "timeDate", "tinytex", "tseries", "TTR", "tune", "tzdb", "usethis", "utf8", "uuid", "vctrs", "vip", "viridis", "viridisLite", "vroom", "waldo", "warp", "webshot", "wesanderson", "withr", "workflows", "workflowsets", "xgboost", "yardstick"))
install.packages(c("cli", "colorspace", "data.table", "DiceDesign", "digest", "dplyr", "fansi", "glue", "ipred", "jsonlite", "lubridate", "MASS", "Matrix", "nnet", "plyr", "pROC", "prodlim", "purrr", "Rcpp", "tibble", "tidyr", "utf8", "vctrs", "xgboost", "yardstick"))
install.packages(c("xgboost", "yardstick"))
install.packages(c("cli", "colorspace", "data.table"))
install.packages("micEcon")
install.packages("readr")
install.packages("micEcon")
install.packages("readr")
install.packages("stargazer")
install.packages("glm2")
install.packages("dplyr")
install.packages("frontier")
install.packages("glmulti")
install.packages("tidyverse")
install.packages("leaps")
install.packages("FactoMineR")
install.packages("kableExtra")
install.packages("arrow")
library(tidyverse)
library(quanteda)
library(quanteda.textstats)
library(e1071)
IMDB <- read.csv(file = "IMDB.csv")
IMDB |> head(2)
IMDB$review <- IMDB$review |> str_to_lower() |>
str_remove_all(pattern = "<br />") |>
str_remove_all(pattern = regex("[\\d]")) |>#on supprime tous les nombres
str_remove_all(pattern = regex("[:punct:]"))
IMDB_train <- IMDB |> slice(1:1000)
IMDB_test <- IMDB |> slice(1001:1500)
Corpus <- corpus(IMDB_train,
text_field = "review")
Corpus |> head(2)
Corpus |> summary(10)
Corpus_token <- Corpus |> tokens(remove_numbers = TRUE,
remove_punct = TRUE)
Corpus_token |> head(2)
IMDB_train$review |> str_which(pattern = "bad") |> head(5)
Corpus_token |> kwic(pattern = "bad", window = 2) |> head(5)
mots_vides_contexte <- c("film", "films", "movie", "movies")
mots_vides <- c(stopwords(language = "en"), mots_vides_contexte)
Corpus_token_smv <- Corpus_token |> tokens_select(pattern = mots_vides,
selection = "remove")
Corpus_token[[1]] |> length()
Corpus_token_smv[[1]] |> length()
dfm_smv <- dfm(Corpus_token_smv)
dfm_smv
dfm_smv |> quanteda::ndoc()
dfm_smv |> topfeatures(10)
dfm_smv |> colSums() |> sort(decreasing = TRUE) |> head(10)
library(quanteda.textstats)
library(quanteda.textstats)
freq_terms <- dfm_smv |> textstat_frequency()
freq_terms |> head(5)
freq_terms[freq_terms$feature == "bad", ]
freq_terms_bys <- dfm_smv |> textstat_frequency(groups = sentiment)
freq_terms_bys |> head(2)
freq_terms_bys |> filter(feature == "bad")
ts_key <- dfm_smv |> textstat_keyness(target = (dfm_smv$sentiment == "positive"))
ts_key |> tail(10)
ts_key |> arrange(desc(abs(chi2))) |> head(5)
Corpus_train <- corpus(IMDB_train, text_fiel = "review")
Corpus_train <- corpus(IMDB_train, text_field = "review")
dfm_train <- Corpus_train |>
tokens(remove_punct = TRUE, remove_numbers = TRUE) |>
tokens_select(pattern = mots_vides, selection = "remove")
Corpus_train <- corpus(IMDB_train, text_field = "review")
dfm_train <- Corpus_train |>
tokens(remove_punct = TRUE, remove_numbers = TRUE) |>
tokens_select(pattern = mots_vides, selection = "remove") |>
dfm()
dfm_train |> head()
dfm_train_bin <- dfm_train |> dfm_weight(scheme = "boolean")
df_train <- convert(dfm_train_bin, to = "data.frame") |>
select(-1) |> mutate(sentiment = IMDB_train$sentiment)
library(e1071)
classif <- svm(sentiment~., data = df_train, kernel = "linear")
dfm_train_bin <- dfm_train |> dfm_weight(scheme = "boolean") |>
dfm_trim(min_termfreq = 10)
df_train <- convert(dfm_train_bin, to = "data.frame") |>
select(-1) |> mutate(sentiment = IMDB_train$sentiment)
classif <- svm(sentiment~., data = df_train, kernel = "linear")
dfm_train_bin <- dfm_train |> dfm_weight(scheme = "boolean") |>
dfm_trim(min_docfreq = 10)
df_train <- convert(dfm_train_bin, to = "data.frame") |>
select(-1) |> mutate(sentiment = IMDB_train$sentiment)
classif <- svm(sentiment~., data = df_train, kernel = "linear")
shiny::runApp('C:/Users/aybuk/Desktop/Cours M2/Big Data/Shiny/Shiny')
runApp('C:/Users/aybuk/Desktop/Cours M2/Big Data/Shiny/Shiny')
library(shiny)
library(arrow)
library(ggplot2)
library(tidyverse)
library(bslib)
library(DT)
library(shinydashboard)
library(shinythemes)
path <- paste0(dirname(rstudioapi::getActiveDocumentContext()$path), "/")
source(paste0(path, "server.R"))
df <- read_parquet("C:/Users/aybuk/Desktop/Cours M2/Big Data/Shiny/data/recette.parquet")
df$temps <- round(df$temps,2)
custom_theme <- bs_theme(
primary = "#74736e",
bg = "#FFFFFF",
fg = "#74736e",
font_scale = 1.1,
heading_font = font_google("Playfair Display"),
base_font = font_google("Roboto")
)
ui <- page_navbar(
theme = custom_theme,
title = span(img(src = "chokbar.png", height = 50), "Cook'ies"),
sidebar = sidebar(
checkboxInput("select_all", "Tout cocher", value = FALSE),
selectInput(
"select_pays",
"Pays",
choices = unique(df$pays),
multiple = TRUE,
selected = "espagne"
),
sliderInput(
"select_temps",
"Temps",
min = 0,
value = 20,
max = max(df$temps),
step = 5
),
selectInput(
"select_niveau",
"Niveau",
choices = unique(df$niveau),
multiple = TRUE,
selected = "Facile"
)
),
nav_panel(
title = "Consultation️",
card(
card_header("Les recettes"),
gt_output("table_recette")
)
),
nav_panel(
title = "Statistiques",
card(
card_header("Les coûts"),
plotlyOutput("plot_cout")
)
),
nav_panel(
title = "Map️",
card(
card_header("Map"),
plotlyOutput("map_monde")
)
),
nav_spacer(),
nav_menu(
title = "Links",
align = "right"
)
)
library(shiny)
library(ggplot2)
library(tidyverse)
library(arrow)
library(gt)
library(shinydashboard)
library(plotly)
iso3 <- data.frame(
pays = c(
"allemagne", "autriche", "belgique", "bulgarie", "crete", "croatie", "espagne", "grece", "hongrie",
"irlandaises", "italie", "lituanie", "norvegiennes", "pologne", "portugal", "roumanie", "royaume-uni",
"suede", "suisse", "turquie", "azerbaidjan", "chine", "coreennes", "inde", "israel", "japon", "laos",
"libanaises", "russie", "thailande", "vietnamiennes", "etats-unis", "canada", "caraibes", "cubaines",
"mexique", "argentine", "bresil", "chili", "perou", "venezuela", "africaines", "afrique-du-sud", "algerie",
"benin", "cameroun", "cote-ivoire", "ile-maurice", "maroc", "senegal", "tunisie", "australie", "indonesiennes",
"nouvelle-zelande", "guadeloupe", "guyane", "martinique", "nouvelle-caledonie", "reunion", "tahiti"
),
iso_alpha3 = c(
"DEU", "AUT", "BEL", "BGR", "GRC", "HRV", "ESP", "GRC", "HUN", "IRL", "ITA", "LTU", "NOR", "POL", "PRT",
"ROU", "GBR", "SWE", "CHE", "TUR", "AZE", "CHN", "KOR", "IND", "ISR", "JPN", "LAO", "LBN", "RUS", "THA",
"VNM", "USA", "CAN", "CUB", "CUB", "MEX", "ARG", "BRA", "CHL", "PER", "VEN", "AFG", "ZAF", "DZA", "BEN",
"CMR", "CIV", "MUS", "MAR", "SEN", "TUN", "AUS", "IDN", "NZL", "GLP", "GUF", "MTQ", "NCL", "REU", "PYF"
)
)
server <- function(input, output) {
#----------------------------PLOT----------------------------#
output$plot_cout <- renderPlotly({
ifelse(input$select_all,
df_plot <- df,
df_plot <- df |>
filter(pays %in% input$select_pays) |>
filter(niveau %in% input$select_niveau) |>
filter(temps < input$select_temps))
plot_ly(x = df_plot$cout, type = "histogram")
})
#----------------------------TABLE----------------------------#
output$table_recette <- render_gt({
ifelse(input$select_all,
df_rec <- df[,c("img", "nom","pays", "niveau", "temps", "cout")],
df_rec <- df[,c("img", "nom","pays", "niveau", "temps", "cout")] |>
filter(pays %in% input$select_pays) |>
filter(niveau %in% input$select_niveau) |>
filter(temps < input$select_temps))
df_rec |>
gt() |>
opt_interactive(use_compact_mode = TRUE) |>
text_transform(
locations = cells_body(columns = img),
fn = function(x){
web_image(
url = df_rec$img,
height = px(50)
)
}
) |>
tab_header("Recettes")
})
#----------------------------TABLE----------------------------#
output$map_monde <- renderPlotly({
data <- merge(df, iso3, by = "pays", all.x = TRUE)
df_mc <- data |>
group_by(iso_alpha3, pays) |> summarise(mean_cout = mean(cout))
plot_ly(df_mc, type='choropleth',
locations=df_mc$iso_alpha3,
z=df_mc$mean_cout,
text=df_mc$pays,
colorscale="Blues")
})
}
path <- paste0(dirname(rstudioapi::getActiveDocumentContext()$path), "/")
source(paste0(path, "server.R"))
source(paste0(path, "ui.R"))
shinyApp(ui = ui, server = server)
runApp('C:/Users/aybuk/Desktop/Cours M2/Big Data/Shiny/Shiny')
library(shiny)
library(arrow)
library(ggplot2)
library(tidyverse)
library(bslib)
library(DT)
library(shinydashboard)
library(shinythemes)
path <- paste0(dirname(rstudioapi::getActiveDocumentContext()$path), "/")
source(paste0(path, "server.R"))
df <- read_parquet("C:/Users/aybuk/Desktop/Cours M2/Big Data/Shiny/data/recette.parquet")
df$temps <- round(df$temps,2)
custom_theme <- bs_theme(
version = 5,
primary = "#74736e",
bg = "#FFFFFF",
fg = "#74736e",
font_scale = 1.1,
heading_font = font_google("Playfair Display"),
base_font = font_google("Roboto")
)
ui <- page_navbar(
theme = custom_theme,
title = span(img(src = "chokbar.png", height = 50), "Cook'ies"),
sidebar = sidebar(
checkboxInput("select_all", "Tout cocher", value = FALSE),
selectInput(
"select_pays",
"Pays",
choices = unique(df$pays),
multiple = TRUE,
selected = "espagne"
),
sliderInput(
"select_temps",
"Temps",
min = 0,
value = 20,
max = max(df$temps),
step = 5
),
selectInput(
"select_niveau",
"Niveau",
choices = unique(df$niveau),
multiple = TRUE,
selected = "Facile"
)
),
nav_panel(
title = "Consultation️",
card(
card_header("Les recettes"),
gt_output("table_recette")
)
),
nav_panel(
title = "Statistiques",
card(
card_header("Les coûts"),
plotlyOutput("plot_cout")
)
),
nav_panel(
title = "Map️",
card(
card_header("Map 🗺"),
plotlyOutput("map_monde")
)
),
nav_spacer(),
nav_menu(
title = "Links",
align = "right"
)
)
library(shiny)
library(ggplot2)
library(tidyverse)
library(arrow)
library(gt)
library(shinydashboard)
library(plotly)
iso3 <- data.frame(
pays = c(
"allemagne", "autriche", "belgique", "bulgarie", "crete", "croatie", "espagne", "grece", "hongrie",
"irlandaises", "italie", "lituanie", "norvegiennes", "pologne", "portugal", "roumanie", "royaume-uni",
"suede", "suisse", "turquie", "azerbaidjan", "chine", "coreennes", "inde", "israel", "japon", "laos",
"libanaises", "russie", "thailande", "vietnamiennes", "etats-unis", "canada", "caraibes", "cubaines",
"mexique", "argentine", "bresil", "chili", "perou", "venezuela", "africaines", "afrique-du-sud", "algerie",
"benin", "cameroun", "cote-ivoire", "ile-maurice", "maroc", "senegal", "tunisie", "australie", "indonesiennes",
"nouvelle-zelande", "guadeloupe", "guyane", "martinique", "nouvelle-caledonie", "reunion", "tahiti"
),
iso_alpha3 = c(
"DEU", "AUT", "BEL", "BGR", "GRC", "HRV", "ESP", "GRC", "HUN", "IRL", "ITA", "LTU", "NOR", "POL", "PRT",
"ROU", "GBR", "SWE", "CHE", "TUR", "AZE", "CHN", "KOR", "IND", "ISR", "JPN", "LAO", "LBN", "RUS", "THA",
"VNM", "USA", "CAN", "CUB", "CUB", "MEX", "ARG", "BRA", "CHL", "PER", "VEN", "AFG", "ZAF", "DZA", "BEN",
"CMR", "CIV", "MUS", "MAR", "SEN", "TUN", "AUS", "IDN", "NZL", "GLP", "GUF", "MTQ", "NCL", "REU", "PYF"
)
)
server <- function(input, output) {
#----------------------------PLOT----------------------------#
output$plot_cout <- renderPlotly({
ifelse(input$select_all,
df_plot <- df,
df_plot <- df |>
filter(pays %in% input$select_pays) |>
filter(niveau %in% input$select_niveau) |>
filter(temps < input$select_temps))
plot_ly(x = df_plot$cout, type = "histogram")
})
#----------------------------TABLE----------------------------#
output$table_recette <- render_gt({
ifelse(input$select_all,
df_rec <- df[,c("img", "nom","pays", "niveau", "temps", "cout")],
df_rec <- df[,c("img", "nom","pays", "niveau", "temps", "cout")] |>
filter(pays %in% input$select_pays) |>
filter(niveau %in% input$select_niveau) |>
filter(temps < input$select_temps))
df_rec |>
gt() |>
opt_interactive(use_compact_mode = TRUE) |>
text_transform(
locations = cells_body(columns = img),
fn = function(x){
web_image(
url = df_rec$img,
height = px(50)
)
}
) |>
tab_header("Recettes")
})
#----------------------------TABLE----------------------------#
output$map_monde <- renderPlotly({
data <- merge(df, iso3, by = "pays", all.x = TRUE)
df_mc <- data |>
group_by(iso_alpha3, pays) |> summarise(mean_cout = mean(cout))
plot_ly(df_mc, type='choropleth',
locations=df_mc$iso_alpha3,
z=df_mc$mean_cout,
text=df_mc$pays,
colorscale="Blues")
})
}
path <- paste0(dirname(rstudioapi::getActiveDocumentContext()$path), "/")
source(paste0(path, "server.R"))
source(paste0(path, "ui.R"))
shinyApp(ui = ui, server = server)
runApp('C:/Users/aybuk/Desktop/Cours M2/Big Data/Shiny/Shiny')
runApp('C:/Users/aybuk/Desktop/Cours M2/Big Data/Shiny/Shiny')
runApp('C:/Users/aybuk/Desktop/Cours M2/Big Data/Shiny/Shiny')
