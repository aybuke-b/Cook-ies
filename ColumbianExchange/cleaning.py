import polars as pl

def _clean_temps(df:pl.DataFrame) -> pl.DataFrame:
    df = df.with_columns(
        pl.col("temps").str.extract(r"(\d+ h)").alias("h"),
        pl.col("temps").str.extract(r"(\d+ min)").alias("min"),
    )
    df = df.with_columns(
        pl.col("h")
        .str.replace(" h", "")
        .cast(pl.Int64)
        .fill_null(strategy="zero"),
        pl.col("min")
        .str.replace(" min", "")
        .cast(pl.Int64)
        .fill_null(strategy="zero")
    )
    
    df = df.with_columns(
        temps = (pl.col("h") * 60 + pl.col("min"))/60
    )
    df = df.drop("h", "min")
    return df

def _clean_cout(df:pl.DataFrame) -> pl.DataFrame:
    df = df.with_columns(
        pl.col("cout")
        .str.replace(",", ".")
        .str.replace("\n\n\n", "0")
        .cast(pl.Float64)
    )
    return df

def _clean_nb_comment(df:pl.DataFrame) -> pl.DataFrame:
    df = df.with_columns(
        pl.col("nb_comment")
        .cast(pl.Int64)
    )
    return df

def _clean_pays(df:pl.DataFrame) -> pl.DataFrame:
    df = df.with_columns(
        pl.col("pays")
        .str.replace("https://www.cuisineaz.com", "")
        .str.replace("/cuisine-du-monde/", "")
        .str.replace("/recettes-", "")
        .str.replace(r".{5}$","")
    )
    return df


def clean_pays2(df : pl.DataFrame) -> pl.DataFrame:
    df = df.with_columns(
        pl.col("pays")
        .str.replace("irlandaises", "irlande")
        .str.replace("norvegiennes", "norvege")
        .str.replace("libanaises", "liban")
        .str.replace("africaines", "afrique")
        .str.replace("indonesiennes", "indonesie")
        .str.replace("vietnamiennes", "vietnam")
        .str.replace("coreennes", "corée du sud")
        .str_replace("cubaines", "cuba")
        .str.to_titlecase()
    )
    return df

def add_iso_code(df: pl.DataFrame) -> pl.DataFrame:
    """Permet de récupérer un code ISO à partir du nom d'un pays."""
    df = df.with_columns(
        pl.when(pl.col("pays") == "Allemagne")
        .then(pl.lit("DE"))
        .when(pl.col("pays") == "Autriche")
        .then(pl.lit("AT"))
        .when(pl.col("pays") == "Belgique")
        .then(pl.lit("BE"))
        .when(pl.col("pays") == "Bulgarie")
        .then(pl.lit("BG"))
        .when(pl.col("pays") == "Crete")
        .then(pl.lit("GR"))
        .when(pl.col("pays") == "Croatie")
        .then(pl.lit("HR"))
        .when(pl.col("pays") == "Espagne")
        .then(pl.lit("ES"))
        .when(pl.col("pays") == "Grece")
        .then(pl.lit("GR"))
        .when(pl.col("pays") == "Hongrie")
        .then(pl.lit("HU"))
        .when(pl.col("pays") == "Irlande")
        .then(pl.lit("IE"))
        .when(pl.col("pays") == "Italie")
        .then(pl.lit("IT"))
        .when(pl.col("pays") == "Lituanie")
        .then(pl.lit("LT"))
        .when(pl.col("pays") == "Norvege")
        .then(pl.lit("NO"))
        .when(pl.col("pays") == "Pologne")
        .then(pl.lit("PL"))
        .when(pl.col("pays") == "Portugal")
        .then(pl.lit("PT"))
        .when(pl.col("pays") == "Roumanie")
        .then(pl.lit("RO"))
        .when(pl.col("pays") == "Royaume-Uni")
        .then(pl.lit("GB"))
        .when(pl.col("pays") == "Suede")
        .then(pl.lit("SE"))
        .when(pl.col("pays") == "Suisse")
        .then(pl.lit("CH"))
        .when(pl.col("pays") == "Turquie")
        .then(pl.lit("TR"))
        .when(pl.col("pays") == "Azerbaidjan")
        .then(pl.lit("AZ"))
        .when(pl.col("pays") == "Chine")
        .then(pl.lit("CN"))
        .when(pl.col("pays") == "Coree du Sud")
        .then(pl.lit("KR"))
        .when(pl.col("pays") == "Inde")
        .then(pl.lit("IN"))
        .when(pl.col("pays") == "Israel")
        .then(pl.lit("IL"))
        .when(pl.col("pays") == "Japon")
        .then(pl.lit("JP"))
        .when(pl.col("pays") == "Laos")
        .then(pl.lit("LA"))
        .when(pl.col("pays") == "Liban")
        .then(pl.lit("LB"))
        .when(pl.col("pays") == "Russie")
        .then(pl.lit("RU"))
        .when(pl.col("pays") == "Thailande")
        .then(pl.lit("TH"))
        .when(pl.col("pays") == "Vietnam")
        .then(pl.lit("VN"))
        .when(pl.col("pays") == "Etats-Unis")
        .then(pl.lit("US"))
        .when(pl.col("pays") == "Canada")
        .then(pl.lit("CA"))
        .when(pl.col("pays") == "Cuba")
        .then(pl.lit("CU"))
        .when(pl.col("pays") == "Mexique")
        .then(pl.lit("MX"))
        .when(pl.col("pays") == "Argentine")
        .then(pl.lit("AR"))
        .when(pl.col("pays") == "Bresil")
        .then(pl.lit("BR"))
        .when(pl.col("pays") == "Chili")
        .then(pl.lit("CL"))
        .when(pl.col("pays") == "Perou")
        .then(pl.lit("PE"))
        .when(pl.col("pays") == "Venezuela")
        .then(pl.lit("VE"))
        .when(pl.col("pays") == "Afghanistan")
        .then(pl.lit("AF"))
        .when(pl.col("pays") == "Afrique du Sud")
        .then(pl.lit("ZA"))
        .when(pl.col("pays") == "Algerie")
        .then(pl.lit("DZ"))
        .when(pl.col("pays") == "Benin")
        .then(pl.lit("BJ"))
        .when(pl.col("pays") == "Cameroun")
        .then(pl.lit("CM"))
        .when(pl.col("pays") == "Cote d'Ivoire")
        .then(pl.lit("CI"))
        .when(pl.col("pays") == "Ile Maurice")
        .then(pl.lit("MU"))
        .when(pl.col("pays") == "Maroc")
        .then(pl.lit("MA"))
        .when(pl.col("pays") == "Senegal")
        .then(pl.lit("SN"))
        .when(pl.col("pays") == "Tunisie")
        .then(pl.lit("TN"))
        .when(pl.col("pays") == "Australie")
        .then(pl.lit("AU"))
        .when(pl.col("pays") == "Indonesie")
        .then(pl.lit("ID"))
        .when(pl.col("pays") == "Nouvelle Zelande")
        .then(pl.lit("NZ"))
        .when(pl.col("pays") == "Guadeloupe")
        .then(pl.lit("GP"))
        .when(pl.col("pays") == "Guyane")
        .then(pl.lit("GF"))
        .when(pl.col("pays") == "Martinique")
        .then(pl.lit("MQ"))
        .when(pl.col("pays") == "Nouvelle Caledonie")
        .then(pl.lit("NC"))
        .when(pl.col("pays") == "Reunion")
        .then(pl.lit("RE"))
        .when(pl.col("pays") == "Tahiti")
        .then(pl.lit("PF"))
        .otherwise(None)
        .alias("ISO2")
    )
    return df 



def add_iso_code2(df: pl.DataFrame) -> pl.DataFrame:
    """Permet de récupérer un code ISO à partir du nom d'un pays."""
    df = df.with_columns(
        pl.when(pl.col("pays") == "Allemagne")
        .then(pl.lit("DEU"))
        .when(pl.col("pays") == "Autriche")
        .then(pl.lit("AUT"))
        .when(pl.col("pays") == "Belgique")
        .then(pl.lit("BEL"))
        .when(pl.col("pays") == "Bulgarie")
        .then(pl.lit("BGR"))
        .when(pl.col("pays") == "Crete")
        .then(pl.lit("GRC"))
        .when(pl.col("pays") == "Croatie")
        .then(pl.lit("HRV"))
        .when(pl.col("pays") == "Espagne")
        .then(pl.lit("ESP"))
        .when(pl.col("pays") == "Grece")
        .then(pl.lit("GRC"))
        .when(pl.col("pays") == "Hongrie")
        .then(pl.lit("HUN"))
        .when(pl.col("pays") == "Irlande")
        .then(pl.lit("IRL"))
        .when(pl.col("pays") == "Italie")
        .then(pl.lit("ITA"))
        .when(pl.col("pays") == "Lituanie")
        .then(pl.lit("LTU"))
        .when(pl.col("pays") == "Norvege")
        .then(pl.lit("NOR"))
        .when(pl.col("pays") == "Pologne")
        .then(pl.lit("POL"))
        .when(pl.col("pays") == "Portugal")
        .then(pl.lit("PRT"))
        .when(pl.col("pays") == "Roumanie")
        .then(pl.lit("ROU"))
        .when(pl.col("pays") == "Royaume-Uni")
        .then(pl.lit("GBR"))
        .when(pl.col("pays") == "Suede")
        .then(pl.lit("SWE"))
        .when(pl.col("pays") == "Suisse")
        .then(pl.lit("CHE"))
        .when(pl.col("pays") == "Turquie")
        .then(pl.lit("TUR"))
        .when(pl.col("pays") == "Azerbaidjan")
        .then(pl.lit("AZE"))
        .when(pl.col("pays") == "Chine")
        .then(pl.lit("CHN"))
        .when(pl.col("pays") == "Coree du Sud")
        .then(pl.lit("KOR"))
        .when(pl.col("pays") == "Inde")
        .then(pl.lit("IND"))
        .when(pl.col("pays") == "Israel")
        .then(pl.lit("ISR"))
        .when(pl.col("pays") == "Japon")
        .then(pl.lit("JPN"))
        .when(pl.col("pays") == "Laos")
        .then(pl.lit("LAO"))
        .when(pl.col("pays") == "Liban")
        .then(pl.lit("LBN"))
        .when(pl.col("pays") == "Russie")
        .then(pl.lit("RUS"))
        .when(pl.col("pays") == "Thailande")
        .then(pl.lit("THA"))
        .when(pl.col("pays") == "Vietnam")
        .then(pl.lit("VNM"))
        .when(pl.col("pays") == "Etats-Unis")
        .then(pl.lit("USA"))
        .when(pl.col("pays") == "Canada")
        .then(pl.lit("CAN"))
        .when(pl.col("pays") == "Cuba")
        .then(pl.lit("CUB"))
        .when(pl.col("pays") == "Mexique")
        .then(pl.lit("MEX"))
        .when(pl.col("pays") == "Argentine")
        .then(pl.lit("ARG"))
        .when(pl.col("pays") == "Bresil")
        .then(pl.lit("BRA"))
        .when(pl.col("pays") == "Chili")
        .then(pl.lit("CHL"))
        .when(pl.col("pays") == "Perou")
        .then(pl.lit("PER"))
        .when(pl.col("pays") == "Venezuela")
        .then(pl.lit("VEN"))
        .when(pl.col("pays") == "Afghanistan")
        .then(pl.lit("AFG"))
        .when(pl.col("pays") == "Afrique du Sud")
        .then(pl.lit("ZAF"))
        .when(pl.col("pays") == "Algerie")
        .then(pl.lit("DZA"))
        .when(pl.col("pays") == "Benin")
        .then(pl.lit("BEN"))
        .when(pl.col("pays") == "Cameroun")
        .then(pl.lit("CMR"))
        .when(pl.col("pays") == "Cote d'Ivoire")
        .then(pl.lit("CIV"))
        .when(pl.col("pays") == "Ile Maurice")
        .then(pl.lit("MUS"))
        .when(pl.col("pays") == "Maroc")
        .then(pl.lit("MAR"))
        .when(pl.col("pays") == "Senegal")
        .then(pl.lit("SEN"))
        .when(pl.col("pays") == "Tunisie")
        .then(pl.lit("TUN"))
        .when(pl.col("pays") == "Australie")
        .then(pl.lit("AUS"))
        .when(pl.col("pays") == "Indonesie")
        .then(pl.lit("IDN"))
        .when(pl.col("pays") == "Nouvelle Zelande")
        .then(pl.lit("NZL"))
        .when(pl.col("pays") == "Guadeloupe")
        .then(pl.lit("GLP"))
        .when(pl.col("pays") == "Guyane")
        .then(pl.lit("GUF"))
        .when(pl.col("pays") == "Martinique")
        .then(pl.lit("MTQ"))
        .when(pl.col("pays") == "Nouvelle Caledonie")
        .then(pl.lit("NCL"))
        .when(pl.col("pays") == "Reunion")
        .then(pl.lit("REU"))
        .when(pl.col("pays") == "Tahiti")
        .then(pl.lit("PYF"))
        .otherwise(None)
        .alias("ISO3")
    )
    return df 



def clean_pipeline(df:pl.DataFrame) -> pl.DataFrame:
    df = (
        df.pipe(_clean_temps)
        .pipe(_clean_cout)
        .pipe(_clean_nb_comment)
        .pipe(_clean_pays)
        .pipe(clean_pays2)
        .pipe(add_iso_code)
        .pipe(add_iso_code2)
    )
    return df



